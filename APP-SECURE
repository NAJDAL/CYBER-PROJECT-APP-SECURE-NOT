import bcrypt
import sqlite3

class SecureLoginSystem:
    def __init__(self):
        self.conn = sqlite3.connect('users.db')
        self.create_user_table()

    def create_user_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            username TEXT NOT NULL,
                            password TEXT NOT NULL
                        )''')
        self.conn.commit()

    def register_user(self):
        print("\n-- User Registration --")
        username = input("Enter a username: ")
        password = input("Enter a password: ")

        cursor = self.conn.cursor()

        # Check if the username already exists
        cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        if cursor.fetchone():
            return "Username already exists. Please choose a different one."

        # Hash the password
        hashed_password = self.hash_password(password)

        # Insert the user into the database
        cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
        self.conn.commit()
        return "Registration successful!"

    def hash_password(self, password):
        # Generate a salt and hash the password
        salt = bcrypt.gensalt()
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)
        return hashed_password.decode('utf-8')

    def login_user(self):
        print("\n-- User Login --")
        username = input("Enter your username: ")
        password = input("Enter your password: ")

        cursor = self.conn.cursor()

        # Fetch the hashed password from the database
        cursor.execute("SELECT password FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()

        if user and self.check_password(password, user[0]):
            return "Login successful!"
        else:
            return "Invalid username or password."

    def check_password(self, password, hashed_password):
        # Check if the provided password matches the hashed password
        return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))

    def close_connection(self):
        self.conn.close()

    def run(self):
        while True:
            print("\n-- Secure Login System --")
            print("1. Register")
            print("2. Login")
            print("3. Quit")

            choice = input("Enter your choice (1-3): ")

            if choice == '1':
                result = self.register_user()
                print(result)
            elif choice == '2':
                result = self.login_user()
                print(result)
            elif choice == '3':
                print("Goodbye!")
                self.close_connection()
                break
            else:
                print("Invalid choice. Please try again.")

if __name__ == "__main__":
    login_system = SecureLoginSystem()
    login_system.run()
